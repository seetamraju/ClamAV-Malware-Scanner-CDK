#!/bin/bash -f

### Will clean ALL temporary and generated files.
### Will also DESTROY the deployed stacks.
### Will also WIPE out everything in Docker !!! This will impact other projects you are working on!

# This license BELOW applies to all content within ./test-deploy-to-aws
# subfolder-tree, as long as it does NOT conflict with the LICENSE defined
# in the LICENSE-file that is located in the topmost folder of this Git-Repo.
# ________________________________________________________________________
# BSD 3-Clause License

# Copyright (c) 2019, org.ASUX
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

### -----------------------------------------------------------

### SECTION: Settings

### -----------------------------------------------------------
### @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
### -----------------------------------------------------------

### SECTION: Reading configuration-settings FILE.

SCRIPTFOLDER=$(dirname -- "$0")
SCRIPTNAME=$(basename -- "$0")
echo "SCRIPTFOLDER = '${SCRIPTFOLDER}'"
echo "SCRIPTNAME = '${SCRIPTNAME}'"
if [ -e "$(pwd)/${SCRIPTFOLDER}" ]; then
    echo "Detected Relative-Path for script".
    SCRIPTFOLDER_FULLPATH="$(pwd)/${SCRIPTFOLDER}"
else
    echo "Detected Absolute-Path for script".
    SCRIPTFOLDER_FULLPATH="${SCRIPTFOLDER}"
fi
echo "SCRIPTFOLDER_FULLPATH = '${SCRIPTFOLDER_FULLPATH}'"

### -----------------------------------------------------------

CommonSettingsFile="./common-settings.sh"
if [ ! -e ${CommonSettingsFile} ]; then
    CommonSettingsFile="${SCRIPTFOLDER_FULLPATH}/${CommonSettingsFile}"
    if [ ! -e ${CommonSettingsFile} ]; then
        echo "ERROR: ${CommonSettingsFile} is missing"
        exit 9
    fi
fi
. ${CommonSettingsFile}

###--------------------------------------------------------

. ${SCRIPTFOLDER_FULLPATH}/checkStackStatus.sh

###--------------------------------------------------------
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
###--------------------------------------------------------

### 1st destroy the stacks, before .venv node_modules and cdk.out are WIPED out.
echo ''
echo \
cdk destroy --role-arn "arn:aws:iam::${AWSACCOUNTID}:role/${DeploymentRoleName}" ${AWSPROFILEREGION}
cdk destroy --role-arn "arn:aws:iam::${AWSACCOUNTID}:role/${DeploymentRoleName}" ${AWSPROFILEREGION}

waitForCompleteDeletionOfStack ${ClamAV_CDK_StackName}

### ------------
echo \
aws cloudformation delete-stack --stack-name ${StackName_DeploymentRole}  ${AWSPROFILEREGION}
aws cloudformation delete-stack --stack-name ${StackName_DeploymentRole}  ${AWSPROFILEREGION}

### ------------
echo ''; echo "Cleaning up buckets that are left behind due to RETENTION_POLICY=RETAIN .. .."
BUCKETS=$( aws s3api list-buckets --query "Buckets[].Name" --output json ${AWSPROFILEREGION} | jq -r '.[] | select(contains("clamav-malware-scanner-cd-clamavserverlessclamscan"))' --raw-output )
# BUCKETS=$( aws s3 ls --output text ${AWSPROFILEREGION} | cut -d ' ' -f 3 | grep 'clamav-malware-scanner-cd-clamavserverlessclamscan' )
for bkt in ${BUCKETS[@]}; do
    echo "'${bkt}'"
    python -c "import bin.s3_utils as u; u.cleanup_bucket(bucket_name='${bkt}', aws_profile_name='${AWSPROFILE}')"
    aws s3 rb s3://${bkt} ${AWSPROFILEREGION}
    sleep 1
done
# for bkt in ${BUCKETS[@]}; do echo "'${bkt}'"; aws s3 rb s3://${bkt} ${AWSPROFILEREGION}; sleep 1; done

echo ''; echo "Cleaning up LOG-GROUPS for Lambdas & Custom-Resources .. .."
LOG_GROUP_NAME_PREFIX="ClamAV-Malware-Scanner"  ### This is for VPC-Flow-Logs
LOG_GROUPS=$( aws logs describe-log-groups --log-group-name-prefix "${LOG_GROUP_NAME_PREFIX}" ${AWSPROFILEREGION} --output text --query 'logGroups[].logGroupName' )
for lg in ${LOG_GROUPS[@]}; do echo "'${lg}'"; aws logs delete-log-group --log-group-name $lg ${AWSPROFILEREGION}; sleep 1; done
LOG_GROUP_NAME_PREFIX="/aws/lambda/ClamAV-Malware-Scanner"  ### Lambda logs
LOG_GROUPS=$( aws logs describe-log-groups --log-group-name-prefix "${LOG_GROUP_NAME_PREFIX}" ${AWSPROFILEREGION} --output text --query 'logGroups[].logGroupName' )
for lg in ${LOG_GROUPS[@]}; do echo "'${lg}'"; aws logs delete-log-group --log-group-name $lg ${AWSPROFILEREGION}; sleep 1; done

### --------------------------------------------------------------------------------

### SECTION: Clean local files.. .. !!! ONLY AFTER DESTROYING THE STACKS !!!
if [ -e .venv ]; then
    while read -r -t 1; do read -r -t 1; done
    read -p "Type Y|y|YES|yes to WIPE-OUT everything and start afresh? (<Cntl-C> to Abort!!) [Nn] >> " ANS
    if [ "${ANS}" == "Y" ] || [ "${ANS}" == "y" ] || [ "${ANS}" == "YES" ] || [ "${ANS}" == "yes" ]; then
        \rm -rf .venv node_modules package-lock.json cdk.out cdk/__pycache__ cdk/lib/__pycache__
    else
        echo "Aborted !!!!!!!!!"
        exit 9
    fi
fi

### --------------------------------------------------------------------------------

docker system prune --all --force
docker volume prune --all --force

### --------------------------------------------------------------------------------

### EoScript