#!/usr/bin/env python3
import os

import aws_cdk as cdk

from cdk.cdk_stack import CdkStack


app = cdk.App()
stk = CdkStack(app, "ClamAV-Malware-Scanner-CDKDeploy",
    # If you don't specify 'env', this stack will be environment-agnostic.
    # Account/Region-dependent features and context lookups will not work,
    # but a single synthesized template can be deployed anywhere.

    # Uncomment the next line to specialize this stack for the AWS Account
    # and Region that are implied by the current CLI configuration.

    #env=cdk.Environment(account=os.getenv('CDK_DEFAULT_ACCOUNT'), region=os.getenv('CDK_DEFAULT_REGION')),

    # Uncomment the next line if you know exactly what Account and Region you
    # want to deploy the stack to. */

    #env=cdk.Environment(account='123456789012', region='us-east-1'),

    # For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html
    )

app_name=stk.stack_name
stk.tags.set_tag( key="Application", value=app_name, apply_to_launched_instances=True )

stk.tags.set_tag( key="ENV", value="dev", apply_to_launched_instances=True )

contact="ToSarma@gmail.com"
stk.tags.set_tag( key="CHRGCODE",  value=contact, apply_to_launched_instances=True )
stk.tags.set_tag( key="ITOwner",   value=contact, apply_to_launched_instances=True )
stk.tags.set_tag( key="DistrList", value=contact, apply_to_launched_instances=True )
stk.tags.set_tag( key="SVCGRP",    value=contact, apply_to_launched_instances=True )

stk.tags.set_tag( key="Validated", value="no", apply_to_launched_instances=True )
stk.tags.set_tag( key="BizOwner", value="me", apply_to_launched_instances=True )
stk.tags.set_tag( key="ORGName", value="MyOrg", apply_to_launched_instances=True )
stk.tags.set_tag( key="BizUnit", value="MyBizUnit", apply_to_launched_instances=True )
stk.tags.set_tag( key="BizSubUnit", value="MyBizSubUnit", apply_to_launched_instances=True )

stk.tags.set_tag( key="UserBase", value="undefined", apply_to_launched_instances=True )
stk.tags.set_tag( key="ArchLayer", value="Security", apply_to_launched_instances=True )

app.synth()
